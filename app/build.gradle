apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        applicationId rootProject.ext.androidApplicationId
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Load values defined in local.properties to BuildConfig.
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            if (!properties.isEmpty()) {
                for (String key : properties.keySet()) {
                    String parsedKey = key.replaceAll("\\.","_").toUpperCase()
                    String parsedValue = "\""+properties.getProperty(key).replaceAll("\\\\","/")+"\""
                    buildConfigField "String", parsedKey, parsedValue
                }
            }
        }
    }

    signingConfigs {
        debug {
            ext.enableCrashlytics = false
            storeFile file('../buildSystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('../buildSystem/release.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'androiddebugkey'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    rootProject.appDependencies.each{
        add(it.configuration, it.dependency, it.options)
    }
}
